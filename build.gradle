plugins {
    id "java"
    id "org.springframework.boot" version "3.1.2"
    id "org.jetbrains.kotlin.jvm" version "1.6.20"
    id "org.liquibase.gradle" version "2.2.0"
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        url = "https://jitpack.io"
    }

    maven {
        url = "https://repo.jenkins-ci.org/releases/"
    }

    maven {
        name "m2-dv8tion"
        url "https://m2.dv8tion.net/releases"
    }
}

compileJava.options.encoding = "UTF-8"

dependencies {
    implementation "ch.qos.logback:logback-classic:1.4.9"

    implementation "com.antkorwin:xsync:1.3"
    implementation "com.google.apis:google-api-services-youtube:v3-rev20210915-1.32.1"
    implementation 'com.google.guava:guava:31.1-jre'
    implementation "com.sedmelluq:jda-nas:1.1.0"
    implementation "dev.arbjerg:lavaplayer:2.0.0"
    implementation "dev.arbjerg:lavaplayer-ext-youtube-rotator:2.0.0"

    implementation "commons-validator:commons-validator:1.7"

    implementation 'io.github.resilience4j:resilience4j-ratelimiter:1.7.1'

    implementation "net.dv8tion:JDA:5.0.0-beta.12"
    implementation "com.github.robinfriedli:exec:1.4"
    implementation "com.github.robinfriedli:JXP:2.0.5"
    implementation "com.github.robinfriedli:StringList:1.6.1"
    implementation "com.github.robinfriedli:ThreadPool:1.2.0"

    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-text:1.9"
    implementation "org.codehaus.groovy:groovy-all:3.0.10"
    implementation "com.github.robinfriedli:topgg-java-sdk:1a1af5964a"
    implementation "org.ehcache:ehcache:3.10.8"
    implementation "org.glassfish:javax.el:3.0.1-b11"
    implementation "org.hibernate:hibernate-core:6.2.7.Final"
    implementation "org.hibernate:hibernate-jcache:6.2.7.Final"
    implementation "org.hibernate.validator:hibernate-validator:8.0.1.Final"
    implementation "org.liquibase:liquibase-core:4.23.0"
    implementation "org.postgresql:postgresql:42.6.0"
    implementation "org.quartz-scheduler:quartz:2.3.2"
    implementation 'org.springframework.boot:spring-boot-dependencies:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.2'
    implementation 'org.springframework:spring-core:6.0.11'

    // check if IPlaylistItem implementations were added when upgrading and update SpotifyTrack accordingly
    implementation 'se.michaelthelin.spotify:spotify-web-api-java:7.2.0'

    liquibaseRuntime "org.liquibase:liquibase-core:4.23.0"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate6:4.23.0"
    liquibaseRuntime sourceSets.main.runtimeClasspath
    liquibaseRuntime sourceSets.main.output

    testImplementation 'org.testng:testng:7.8.0'
    testImplementation "com.google.truth:truth:1.1.3"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.1.2'
}

test {
    useTestNG()
}

group = "aiode"
version = "1.0-SNAPSHOT"
description = "aiode"
sourceCompatibility = "17"
targetCompatibility = "17"

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    }
    with jar
}

jar {
    manifest {
        attributes(
            "Main-Class": "net.robinfriedli.aiode.boot.SpringBootstrap"
        )
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/webapp"
        }
    }
}

def applicationProperties = new Properties()
file("src/main/resources/application.properties").withInputStream { applicationProperties.load(it) }
def privateProperties = new Properties()
file("src/main/resources/settings-private.properties").withInputStream { privateProperties.load(it) }

bootRun {
    jvmArgs("-Xmx" + applicationProperties.getProperty("aiode.preferences.max_heap_size"))
}

liquibase {
    activities {
        main {
            changeLogFile applicationProperties.getProperty("liquibase.change-log-path")
            referenceUrl applicationProperties.getProperty("liquibase.referenceUrl")
            url applicationProperties.getProperty("spring.datasource.url")
            username privateProperties.getProperty("spring.datasource.username")
            password privateProperties.getProperty("spring.datasource.password")
            referenceDriver "liquibase.ext.hibernate.database.connection.HibernateDriver"
        }
    }
}
